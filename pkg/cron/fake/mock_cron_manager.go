// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/cron/cron_manager.go

// Package fake is a generated GoMock package.
package fake

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/tmax-cloud/scheduled-scaler-operator/api/v1"
)

// MockCronManager is a mock of CronManager interface.
type MockCronManager struct {
	ctrl     *gomock.Controller
	recorder *MockCronManagerMockRecorder
}

// MockCronManagerMockRecorder is the mock recorder for MockCronManager.
type MockCronManagerMockRecorder struct {
	mock *MockCronManager
}

// NewMockCronManager creates a new mock instance.
func NewMockCronManager(ctrl *gomock.Controller) *MockCronManager {
	mock := &MockCronManager{ctrl: ctrl}
	mock.recorder = &MockCronManagerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockCronManager) EXPECT() *MockCronManagerMockRecorder {
	return m.recorder
}

// RemoveCron mocks base method.
func (m *MockCronManager) RemoveCron(arg0 *v1.ScheduledScaler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveCron", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// RemoveCron indicates an expected call of RemoveCron.
func (mr *MockCronManagerMockRecorder) RemoveCron(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveCron", reflect.TypeOf((*MockCronManager)(nil).RemoveCron), arg0)
}

// UpdateCron mocks base method.
func (m *MockCronManager) UpdateCron(arg0 *v1.ScheduledScaler) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCron", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCron indicates an expected call of UpdateCron.
func (mr *MockCronManagerMockRecorder) UpdateCron(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCron", reflect.TypeOf((*MockCronManager)(nil).UpdateCron), arg0)
}
