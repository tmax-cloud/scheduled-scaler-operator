// Code generated by MockGen. DO NOT EDIT.
// Source: pkg/scaler/scaler.go

// Package fake is a generated GoMock package.
package fake

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	v1 "github.com/tmax-cloud/scheduled-scaler-operator/api/v1"
)

// MockScaler is a mock of Scaler interface.
type MockScaler struct {
	ctrl     *gomock.Controller
	recorder *MockScalerMockRecorder
}

// MockScalerMockRecorder is the mock recorder for MockScaler.
type MockScalerMockRecorder struct {
	mock *MockScaler
}

// NewMockScaler creates a new mock instance.
func NewMockScaler(ctrl *gomock.Controller) *MockScaler {
	mock := &MockScaler{ctrl: ctrl}
	mock.recorder = &MockScalerMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockScaler) EXPECT() *MockScalerMockRecorder {
	return m.recorder
}

// Run mocks base method.
func (m *MockScaler) Run() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Run")
}

// Run indicates an expected call of Run.
func (mr *MockScalerMockRecorder) Run() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Run", reflect.TypeOf((*MockScaler)(nil).Run))
}

// Schedule mocks base method.
func (m *MockScaler) Schedule() v1.Schedule {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Schedule")
	ret0, _ := ret[0].(v1.Schedule)
	return ret0
}

// Schedule indicates an expected call of Schedule.
func (mr *MockScalerMockRecorder) Schedule() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Schedule", reflect.TypeOf((*MockScaler)(nil).Schedule))
}
